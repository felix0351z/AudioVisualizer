@startuml
'https://plantuml.com/class-diagram


' Stellt ein Program dar, welche nur eine Visualisierung durchführung kann
class SingleProgram {
  + SingleProgram() <<constructor>>

  + get_effects()
  + get_selected_effects()
  + set_effect(name: String)

  + start()
  + pause()
}

' Klasse welche die Inputdaten verarbeitet und analysiert, um diese für die Effekte und Farben Objekte
' bereitzustellen
class AudioAnalyser {
    ' Methodenaufruf welche den momentanen Frame analysiert
    + process(frame: Float[]): AudioInformation

    ' Untermethoden für die Verarbeitung / Analyse:
    ' Nimmt den momentane Frame + den Letzten zusammen und legt ein Fenster darauf,
    - do_framing()
    ' Führt die FourierTransformation durch und berechnet die Power-Frames
    - do_fft()
    ' Erstellt ein Mel-Spektrum aus den Power-Frames und ersetzt die Amplitude zu Dezibel
    - do_mel()
    ' Glättet das Signal für eine bessere Informationsdarstellung (Exponential Filter + Gauß-Filter)
    - do_smoothing()
}
'Weitere kleinere EffektAnalyser und Untermethoden möglich z.B. für Rythmikberechnung

' Beinhaltet alle nötigen Information über das momentane Frame
' zur Erstellung des Effekts
class AudioInformation {
    ' Momentaner Frame in originaler Wellen-Form
    + raw: Float[]
     ' Momentaner Frame im Mel-Spektrum (bereits geglättet)
    + mel: Float[]

    ' Weitere Rhythmic Informationen wie Energie etc...
}

' Thread zum Einlesen der Wiedergabemusik mit PyAudio(PortAudio)
class BufferInputThread {
    ' Ein Callback muss übergeben werden, welche die Eingangsdaten verarbeitet
    + BufferInputThread(callback: (raw: Float[]) -> fn) <<constructor>>

    ' Starten des Thread
    + run()
}

' Hilfsklasse zur Glättung eines Signals
class SimpleExponentialFilter

' Beschreibung eines Effekts
class EffectInfo {
    + name: String
    + description: String
}

abstract class Effect {
    + info(): EffectInfo
    + process(data: AudioInformation): Float[]
}

abstract class Color




@enduml