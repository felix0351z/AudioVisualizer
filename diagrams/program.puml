@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class EffectInformation {
    + name: str
    + description: str
}

abstract class AudioEffect {
    + NAME: str
    + DESCRIPTION: str
    + use_color_render: bool

    {abstract} + start()
    {abstract} + update(config)
    {abstract} + visualize(): np.ndarray

    + activate(n_led: int, sample_rate: int)
    + description(): EffectInformation
    + process(raw: np.ndarray)
    + sample_rate(): int
    + amount_leds(): int
    + power_spectrum(): np.ndarray
    + rms(): float
}

abstract class ColorRender {
    {abstract} + visualize_rgb(): np.ndarray
}

class EnergyEffect {
    + NAME: str
    + DESCRIPTION: str

    + GAIN_RISE: float
    + GAIN_DECAY: float
    + SMOOTHING_RISE: float
    + SMOOTHING_DECAY: float
    + STANDARD_DEVIATION: int

    + smoothed_rms(): float

    + start()
    + update(config))
    + visualize(): np.ndarray
}

class MelbankEffect {
    + NAME: str
    + DESCRIPTION: str

    + GAIN: tuple[float, float]
    + SMOOTHING: tuple[float, float]

    + start()
    + update(config))
    + visualize(): np.ndarray
}

class SpectrumEffect {
    + NAME: str
    + DESCRIPTION: str

    + MIN_FREQ: int
    + MAX_FREQ: int

    + start()
    + update(config))
    + visualize(): np.ndarray


}


AudioEffect <|--  EnergyEffect
AudioEffect <|-- MelbankEffect
MelbankEffect <|-- SpectrumEffect


class Melbank {

    {static} + hertz_to_mel(hertz: float): float
    {static} + mel_to_hertz(mel: float): float
    {static} + get_mel_frequencies(num_bands: int, freq_min: int, freq_max: int)

    + Melbank(bins: int, sample_rate: int, min_freq: int, max_freq: int, gain: tuple[float, float]?, smoothing: tuple[float, float]?, threshold_filter: bool)
    + get_melbank_from_signal(power_spectrum: np.ndarray): np.ndarray

    - compute_mel_matrix(num_fft_bands: int)
}

class Filter {

    {static} + pre_emphasis(x: np.ndarray): np.ndarray
    {static} + auditory_threshold_filter(signal: np.ndarray, threshold: float?): np.ndarray

}

class SingleExponentialFilter {
    + forcast: float
    + alpha_rise: float
    + alpha_decay: float

    + SingleExponentialFilter(alpha_rise: float, alpha_decay: float, start_value: float)
    + update(x: float): float


}

class DimensionalExponentialFilter {
    + forcast: float
    + alpha_rise: float
    + alpha_decay: float

    + SingleExponentialFilter(alpha_rise: float, alpha_decay: float, start_value: np.ndarray)
    + update(x: np.ndarray): np.ndarray


}

abstract class ColorEffect {
    + NAME: str
    + DESCRIPTION: str

    {abstract} + start()
    {abstract} + update(config))
    {abstract} + visualize(signal: np.ndarray): np.ndarray


}

class StaticColorEffect {
    + NAME: str
    + DESCRIPTION: str

    + start()
    + update(config))
    + visualize(signal: np.ndarray): np.ndarray


}

ColorEffect <|--  StaticColorEffect


class ColorTransition {
    + ColorTransition(color: tuple[int, int, int], transition_time: int)

    + changeColor(new_color: tuple[int, int, int])
    + change_transition_time(new_transition_time: int)
    + update(): tuple[int, int, int]]
}


class InputStreamThread {
    + SAMPLE_RATE: int
    + CHANNELS: int
    + FPS: int

    + InputStreamThread(callback)
    + run()

}

class SacnSender {

    + SacnSender(universe: int?)
    + send(transposed_signal: np.ndarray)

}

class SingleProgram {

    + EFFECTS: list[AudioEffect]
    + COLORS: list[ColorEffect]

    + SingleProgram(callback)
    + get_effects(): list[EffectInformation]
    + get_selected_effect(): EffectInformation
    + set_effect(position: int)

    + set_color(position: int))

    + start()
    + pause()

    - process(raw: np.ndarray))
}

@enduml