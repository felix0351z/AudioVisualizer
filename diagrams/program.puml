@startuml
'https://plantuml.com/class-diagram

class EffectInformation {
    + name: str
    + description: str
}

abstract class AudioEffect {
    + NAME: str
    + DESCRIPTION: str
    + use_color_render

    {abstract} + start()
    {abstract} + update()
    {abstract} + visualize()

    + activate()
    + description()
    + process()
    + sample_rate()
    + amount_leds()
    + power_spectrum()
    + rms()
}

abstract class ColorRender {
    {abstract + visualize_rgb()
}

class EnergyEffect {
    + NAME
    + DESCRIPTION

    + GAIN_RISE
    + GAIN_DECAY
    + SMOOTHING_RISE
    + SMOOTHING_DECAY
    + STANDARD_DEVIATION

    + smoothed_rms()

    + start()
    + update()
    + visualize()
}

class MelbankEffect {
    + NAME
    + DESCRIPTION

    + GAIN_RISE
    + GAIN_DECAY
    + SMOOTHING_RISE
    + SMOOTHING_DECAY

    + start()
    + update()
    + visualize()
}

class SpectrumEffect {
    + NAME
    + DESCRIPTION

    + MIN_FREQ
    + MAX_FREQ

    + start()
    + update()
    + visualize()


}


AudioEffect <|--  EnergyEffect
AudioEffect <|-- MelbankEffect
MelbankEffect <|-- SpectrumEffect


class Melbank {

    {static} + hertz_to_mel()
    {static} + mel_to_hertz()
    {static} + get_mel_frequencies()

    + Melbank()
    + get_melbank_from_signal()

    - compute_mel_matrix()
}

class Filter {

    {static} + pre_emphasis()
    {static} + auditory_threshold_filter()
    {static} + point_wise_auditory_threshold_filter()

}

class SingleExponentialFilter {
    + forcast
    + alpha_rise
    + alpha_decay

    + SingleExponentialFilter()
    + update()


}

class DimensionalExponentialFilter {
    + forcast
    + alpha_rise
    + alpha_decay

    + SingleExponentialFilter()
    + update()


}

abstract class ColorEffect {
    + NAME
    + DESCRIPTION

    {abstract} + start()
    {abstract} + update()
    {abstract} + visualize()


}

class StaticColorEffect {
    + NAME
    + DESCRIPTION

    + start()
    + update()
    + visualize()


}

ColorEffect <|--  StaticColorEffect


class ColorTransition {
    + ColorTransition()

    + changeColor()
    + change_transition_time()
    + update()
}


class InputStreamThread {
    + SAMPLE_RATE
    + CHANNELS
    + FPS

    + InputStreamThread()
    + run()

}

class SacnSender {

    + SacnSender()
    + send()

}

class SingleProgram {

    + EFFECTS
    + COLORS

    + SingleProgram()
    + get_effects()
    + get_selected_effect()
    + set_effect()

    + set_color()

    + start()
    + pause()

    - process()
}






'Collection <|-- AbstractCollection

'Collection <|- List
'AbstractCollection <|- AbstractList
'AbstractList <|-- ArrayList

'class ArrayList {
'Object[] elementData
'size()
'}

'enum TimeUnit {
'DAYS
'HOURS
'MINUTES
'}

@enduml