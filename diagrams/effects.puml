@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class EffectInformation {
    + name: str
    + description: str
}

abstract class AudioEffect {
    + {static} NAME: str
    + {static} DESCRIPTION: str
    - use_color_render: bool
    --
    {abstract} # start()
    {abstract} # update()
    {abstract} # visualize(): np.ndarray
    # sample_rate(): int
    # amount_leds(): int
    # power_spectrum(): np.ndarray
    # rms(): float
    ..
    + activate(n_led: int, sample_rate: int)
    + description(): EffectInformation
    + process(raw: np.ndarray)
}

abstract class ColorRender {
    {abstract} # visualize_rgb(): np.ndarray
}

class EnergyEffect {
    + {static} NAME: str
    + {static} DESCRIPTION: str
    - GAIN_RISE: float
    - GAIN_DECAY: float
    - SMOOTHING_RISE: float
    - SMOOTHING_DECAY: float
    - STANDARD_DEVIATION: int
    --
    - smoothed_rms(): float
    ..
    # start()
    # update()
    # visualize(): np.ndarray
}

class MelbankEffect {
    {static} + NAME: str
    {static} + DESCRIPTION: str
    - GAIN: tuple[float, float]
    - SMOOTHING: tuple[float, float]
    --
    # start()
    # update()
    # visualize(): np.ndarray
}

class SpectrumEffect {
    {static} + NAME: str
    {static} + DESCRIPTION: str
    - MIN_FREQ: int
    - MAX_FREQ: int
    --
    # start()
    # update()
    # visualize(): np.ndarray
}

class ShineEffect {
    {static} + NAME: str
    {static} + DESCRIPTION: str
    - SHINE_FREQ: tuple[int, int]
    - SHINE_SMOOTHING: tuple[float, float]
    - MAIN_COLOR: [int, int, int]
    - SHINE_COLOR: [int, int, int]
    --
    - get_shine_animation(): np.ndarray
    - get_spectrum_animation(): np.ndarray
    ..
    # start()
    # visualize_rgb(): np.ndarray
}

class ColorSpectrumEffect {
    {static} + NAME: str
    {static} + DESCRIPTION: str
    - COLOR_LOW: [int, int, int]
    - COLOR_MIDDLE: [int, int, int]
    - COLOR_HIGH: [int, int, int]
    --
    - get_color_spectrum(melbank: np.ndarray): np.ndarray
    ..
    # start()
    # visualize_rgb(): np.ndarray
}


AudioEffect <|--  EnergyEffect
AudioEffect <|-- MelbankEffect
MelbankEffect <|-- SpectrumEffect
SpectrumEffect <|-- ShineEffect
ColorRender <|-- ShineEffect

SpectrumEffect <|-- ColorSpectrumEffect
ColorRender <|-- ColorSpectrumEffect

@enduml